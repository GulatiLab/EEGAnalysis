clear;clc;close all;

wave_recording; %This is a single-channel or mean-channel recording of size N x 1
Fs %The sampling rate of the recording

%Creates 3 vectors of size N x 1. sleep_idx and artifact _idx are logical vectors with 1s where sleep/artifacts are detected.
%Sleep is detected by looking at the avg pwr in delta and gamma bands (via hilbert method) then clustered using GMM which may be sufficient to remove REM as well
%pwr_out_M1 is the power of LFP for each idx which seems to take the form of a 2x2 matrix with these data [delta_sleep,gamma_sleep;delta_awake,gamma_awake]. I never used it.
[sleep_idx, artifact_idx, pwr_out] = sleep_classification2(wave_recording,0,Fs); %the 2nd value is a plot boolean: 1 for plot, 0 for no plot.

%Returns a struct with various information about the detected SO waves.
%The mnl_parm are detection parameters: [peak_threshold, trough_threshold, minimum_duration, maximum_duration]
%See function documantation for details.
so_delta=detect_so_delta(wave_recording,Fs,...
                        'sleep_idx',sleep_idx,...
                        'artifact_idx',artifact_idx,...
                        'PLOT',1,...
                        'mnl_parm',[85 40 .15 .5]);
                    
%Returns a struct with various information about the detected spindles. The input is a cell array where each cell is a session.
%In this code the whole array is treated as one big session but you may want to use each epoch as a session.
%Sleep_classify is a boolean, if true it will remove non-sleep periods from the analysis. See function documantation for details.
spindles = detect_spindles( mat2cell(wave_recording, length(wave_recording), [1]),...
                'Fs',Fs,...
                'sleep_idx',mat2cell(sleep_idx, length(sleep_idx), [1]),...
                'artifact_idx',mat2cell(artifact_idx, length(artifact_idx), [1]),...
                'PLOT',1,...
                'sleep_classify',1);